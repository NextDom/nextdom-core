#!/usr/bin/env bash
set -e

# Parameters
DEBUG="/tmp/output.txt"
declare -a DETAILS

ENV_TYPE="prod"

# Functions

usage() {
  cat - >&2 <<EOS
usage: $0 [options]

options:
  -D            : copy values of dist/dev.config.ini.dist in default.config.ini
  -h            : display this message
  -i <host>     : database hostname, defaults to localhost
  -z <port>     : database port, defaults to 3306
  -d <name>     : database name, defaults to nextdom (nextdomdev for dev version)
  -u <username> : database user name, defaults to nextdom (nextdomdev for dev version)
  -p <password> : database user password, randomly generated if not given
  -r <password> : database root password
  -L <dir>      : set log directory, defaults to /var/log/nextdom
  -l <dir>      : set lib directory, defaults to /var/lib/nextdom
  -t <dir>      : set tmp directory, defaults to /tmp/nextdom
  -v            : enable verbose output
EOS
  exit 1;
}


# Get current directory
set_root() {
  local this=`readlink -n -f $1`
  local bin=`dirname $this`
  root=`dirname $bin`
}


print_log_in() {
  txt=$1
  if [ 1 -eq "0${isdev}"  ] ; then
      format="%- 50s"
      if [ ${VERBOSE} -eq 1 ]; then
          format="%s"
      fi
      printf "${format}" "${txt}"
  fi
  printf ${txt} >> ${LOG_DIRECTORY}/postinst.log
}

print_log_ok() {

  if [ 1 -eq "0${isdev}"  ] ; then
      echo -e " ${GREEN}Success${NORMAL}"
      if [ "${#DETAILS[@]}" -ne 0 ]; then
          for c_line in "${DETAILS[@]}"; do
            echo "  -> ${c_line}"
          done
      fi
  fi
  echo " Success" >> ${LOG_DIRECTORY}/postinst.log
  if [ "${#DETAILS[@]}" -ne 0 ]; then
      for c_line in "${DETAILS[@]}"; do
        echo "  -> ${c_line}" >> ${LOG_DIRECTORY}/postinst.log
      done
      DETAILS=()
  fi
}

print_verbose() {
  if [ ${VERBOSE} -eq 1 ]; then
      DETAILS+=("$@")
  fi
}

print_error() {
  NORMAL="\\033[0;39m"
  ROUGE="\\033[1;31m"

  if [ 1 -eq "0${isdev}"  ] ; then
      echo -e " ${ROUGE}Failure${NORMAL}"
      echo -e "  -> error: $@"
  fi
  echo -e " Failure" >> ${LOG_DIRECTORY}/postinst.log
  echo -e "  -> error: $@" >> ${LOG_DIRECTORY}/postinst.log
  exit 1
}

detect_dev_version() {
  isdev=0
  WEBSERVER_HOME=/usr/share/nextdom

  # detect if there is a .git directory (development version)
  if [ -d ${root}/.git ] ; then
      isdev=1
      WEBSERVER_HOME=${root}
  fi
}

prereq_create_dirs() {
  # directories
  mkdir -p ${LOG_DIRECTORY}/scenarioLog

  mkdir -p ${LIB_DIRECTORY}
  mkdir -p ${LIB_DIRECTORY}/{market_cache,cache,backup}
  mkdir -p ${LIB_DIRECTORY}/custom/desktop
  mkdir -p ${LIB_DIRECTORY}/public/css
  mkdir -p ${LIB_DIRECTORY}/public/img/plan
  mkdir -p ${LIB_DIRECTORY}/public/img/profils
  mkdir -p ${LIB_DIRECTORY}/public/img/market_cache

  mkdir -p ${root}/plugins

  rm -f ${LOG_DIRECTORY}/postinst.ok
  rm -f ${LOG_DIRECTORY}/postinst.warn
  rm -f ${LOG_DIRECTORY}/postinst.log

  touch ${LOG_DIRECTORY}/postinst.log
  touch ${LOG_DIRECTORY}/cron
  touch ${LOG_DIRECTORY}/cron_execution
  touch ${LOG_DIRECTORY}/event
  touch ${LOG_DIRECTORY}/http.error
  touch ${LOG_DIRECTORY}/plugin
  touch ${LOG_DIRECTORY}/scenario_execution
}

step_nexdom_environement() {
  php_ini_path=$(php --ini | head -n 1 | sed -E "s/.*Path: (.*)\/cli/\\1/")
  if [ -e ${WEBSERVER_HOME}/assets/config/default.config.ini ]; then
      rm ${WEBSERVER_HOME}/assets/config/default.config.ini
  fi
  if [ -e ${php_ini_path}/apache2/conf.d/10-opcache.ini ]; then
      rm ${php_ini_path}/apache2/conf.d/10-opcache.ini
  fi

  if [ ${ENV_TYPE} = "dev" ]; then
      cp -f ${WEBSERVER_HOME}/assets/config/dist/default.config.ini.dev ${WEBSERVER_HOME}/assets/config/default.config.ini
      print_verbose "disable PHP opcache"
      cp -f ${WEBSERVER_HOME}/assets/config/dist/opcache.ini.dev ${php_ini_path}/apache2/conf.d/10-opcache.ini
  else
      cp -f ${WEBSERVER_HOME}/assets/config/dist/default.config.ini.dist ${WEBSERVER_HOME}/assets/config/default.config.ini
      print_verbose "enable PHP opcache"
      cp -f ${WEBSERVER_HOME}/assets/config/dist/opcache.ini.dist ${php_ini_path}/apache2/conf.d/10-opcache.ini
  fi
  print_verbose "restart Apache"
  service apache2 restart
}

step_nextdom_file_permissions() {
  # configure file permissions
  # ${WEBSERVER_HOME}/plugins and ${WEBSERVER_HOME}/public/img should not be given
  # www-data ownership, still needed until proper migration handling
  local directories=("${LIB_DIRECTORY}" "${LOG_DIRECTORY}" "${TMP_DIRECTORY}" "${WEBSERVER_HOME}/plugins" "${WEBSERVER_HOME}/public/img")
  for c_dir in ${directories[*]}; do
    chown -R www-data:www-data ${c_dir}
    find ${c_dir} -type d -exec chmod 0755 {} \;
    find ${c_dir} -type f -exec chmod 0644 {} \;
    print_verbose "set file owner: www-data, perms: 0755/0644 on directory ${c_dir}"
  done
}


step_nextdom_mysql_parameters() {
  if [ 1 -eq "0${isdev}"  ] ; then
      # Development version
      [[ -z "${MYSQL_NEXTDOM_DB}" ]]   && MYSQL_NEXTDOM_DB="nextdomdev"
      [[ -z "${MYSQL_NEXTDOM_USER}" ]] && MYSQL_NEXTDOM_USER="nextdomdev"
  else
    # Debian package configuration...
    # nextdom-mysql preconfiguration
    if [[ -f /etc/nextdom/mysql/secret ]] ; then
        source /etc/nextdom/mysql/secret
    fi
    [[ -z "${MYSQL_NEXTDOM_DB}"   ]] && MYSQL_NEXTDOM_DB="nextdom"
    [[ -z "${MYSQL_NEXTDOM_USER}" ]] && MYSQL_NEXTDOM_USER="nextdom"
  fi

  # All parameters
  HOSTPASS=""
  if [ -n "${MYSQL_ROOT_PASSWD}" ]; then
      HOSTPASS="${HOSTPASS} -p${MYSQL_ROOT_PASSWD}"
  fi
  if [ -n "${MYSQL_HOSTNAME}" ]; then
      HOSTPASS="${HOSTPASS} -h${MYSQL_HOSTNAME}"
  fi
  if [ -n "${MYSQL_PORT}" ]; then
      HOSTPASS="${HOSTPASS} --port=${MYSQL_PORT}"
  fi

  MYSQL_NEXTDOM_PASSWD=${MYSQL_NEXTDOM_PASSWD:-$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 15)}
  MYSQL_HOSTNAME=${MYSQL_HOSTNAME:-localhost}
  MYSQL_PORT=${MYSQL_PORT:-3306}
  MYSQL_NEXTDOM_DB=${MYSQL_NEXTDOM_DB:nextdom}


  print_verbose "install directory: ${WEBSERVER_HOME}"
  print_verbose "database host: ${MYSQL_HOSTNAME}"
  print_verbose "database port: ${MYSQL_PORT}"
  print_verbose "database name: ${MYSQL_NEXTDOM_DB}"
  print_verbose "database user: ${MYSQL_NEXTDOM_USER}"
  print_verbose "database passwd: ${MYSQL_NEXTDOM_PASSWD}"

  # slow start of docker mysql
  try=0
  while [ ${try} -lt 5 ]; do
    mysql -uroot ${HOSTPASS} -e "SHOW DATABASES;" >/dev/null 2>&1 || {
      try=$((try + 1))
      sleep 5
      continue
    }
    return 0
  done

  print_error "can't connect to mysql database"
}


step_nextdom_prerequisites_verification() {
  # These prerequistes are instaled by nextdom-common or nextdom-minimal package,
  # but this part is for other distribution compatibility

  # Create apache configuration if missing
  local dstdir="/etc/apache2/sites-available"
  local srcdir="${WEBSERVER_HOME}/install/apache/"
  local wwwdir="${WEBSERVER_HOME}"

  if [[ ! -d "${dstdir}" ]] ; then
      print_error "apache2 not installed"
  fi

  # check that WEBSERVER_HOME is readable by www-data
  sudo -u www-data test -r "${wwwdir}" || {
    wwwdir="/var/www/html/"
    print_verbose "${wwwdir} not readable by www-data"
    print_verbose "enabled compatibility mode, DocumentRoot targets /var/www/html"
  }

  for c_file in nextdom.conf nextdom-ssl.conf nextdom-common; do
    if [ ! -f ${dstdir}/${c_file} ] || [ 1 -eq "0${isdev}" ] ; then
      cp ${srcdir}/${c_file} ${dstdir}/${c_file} >> ${DEBUG} 2>&1
      sed -i -r "s%\s+Define\s+wwwdir\s.*%Define wwwdir \"${wwwdir}\"%gI"         ${dstdir}/${c_file} >> ${DEBUG} 2>&1
      sed -i -r "s%\s+Define\s+logdir\s.*%Define logdir \"${LOG_DIRECTORY}\"%gI"  ${dstdir}/${c_file} >> ${DEBUG} 2>&1
      print_verbose "created file: ${dstdir}/${c_file}"
    fi
  done

  # Configure private tmp
  if [[ ! -f "/etc/systemd/system/apache2.service.d/privatetmp.conf" ]] ; then
      mkdir -p /etc/systemd/system/apache2.service.d
      cp ${srcdir}/privatetmp.conf /etc/systemd/system/apache2.service.d/privatetmp.conf >> ${DEBUG} 2>&1
      print_verbose "created file: /etc/systemd/system/apache2.service.d/privatetmp.conf"
  fi

  # Windows hack (bash for windows)
  if [[ ! $(uname -r | grep -i microsoft) = "" ]] ; then
      bash ${WEBSERVER_HOME}/install/OS_specific/windows/pre_inst.sh >> ${DEBUG} 2>&1
  fi

  # Certificat SSL auto signe
  if [[ ! -f /etc/nextdom/ssl/nextdom.crt ]] || [[ ! -f /etc/nextdom/ssl/nextdom.csr ]] || [[ ! -f /etc/nextdom/ssl/nextdom.key ]] ; then
      mkdir -p /etc/nextdom/ssl/ >> ${DEBUG} 2>&1
      cd /etc/nextdom/ssl/ >> ${DEBUG} 2>&1
      openssl genrsa -out nextdom.key 2048 >> ${DEBUG} 2>&1
      openssl req -new -key nextdom.key -out nextdom.csr -subj "/C=FR/ST=Paris/L=Paris/O=Global Security/OU=IT Department/CN=example.com" >> ${DEBUG} 2>&1
      openssl x509 -req -days 3650 -in nextdom.csr -signkey nextdom.key -out nextdom.crt >> ${DEBUG} 2>&1
      print_verbose "created SSL self-signed certificates in /etc/nextdom/ssl/"
  fi
}


step_nextdom_apache_php() {
  a2enmod ssl               >> ${DEBUG} 2>&1
  a2enmod rewrite           >> ${DEBUG} 2>&1
  a2dismod status           >> ${DEBUG} 2>&1
  a2dissite 000-default     >> ${DEBUG} 2>&1
  a2dissite default-ssl     >> ${DEBUG} 2>&1
  a2ensite nextdom-ssl      >> ${DEBUG} 2>&1
  a2ensite nextdom          >> ${DEBUG} 2>&1
  print_verbose "apache: disabled site default"
  print_verbose "apache: disabled site default-ssl"
  print_verbose "apache: enabled site nextdom"
  print_verbose "apache: enabled site nextdom-ssl"

  service apache2 restart >> ${DEBUG} 2>&1 || {
    service apache2 restart >> ${DEBUG} 2>&1 || {
      print_error "unable to restart apache2"
    }
  }
}

step_nextdom_directory_layout() {
  # we delete existing config since it is regenerated from asset sample (step_nextdom_configuration)
  rm -rf ${LIB_DIRECTORY}/config
  cp -r  ${WEBSERVER_HOME}/assets/config ${LIB_DIRECTORY}
  print_verbose "created configuration directory ${LIB_DIRECTORY}/config"

  # we delete existing data, since its re-imported from assets
  rm -rf ${LIB_DIRECTORY}/data
  cp -r  ${WEBSERVER_HOME}/assets/data   ${LIB_DIRECTORY}
  print_verbose "created data directory ${LIB_DIRECTORY}/data"

  # jeedom backup compatibility: ./core/config is a symlink
  if [ -L ${WEBSERVER_HOME}/core/config ]; then
      rm -f ${WEBSERVER_HOME}/core/config
  fi
  ln -s ${LIB_DIRECTORY}/config ${WEBSERVER_HOME}/core/config
  print_verbose "created core configuration symlink: ${WEBSERVER_HOME}/core/config"

  # jeedom backup compatibility:  ./var is a symlink
  if [ -L ${WEBSERVER_HOME}/var ]; then
      rm -f ${WEBSERVER_HOME}/var
  fi
  if [ -d ${WEBSERVER_HOME}/var ]; then
      content=$(ls -A ${WEBSERVER_HOME}/var)
      if [ ! -z "${content}" ]; then
          tmpvar=$(mktemp -d ${WEBSERVER_HOME}/var.XXXXXXXX)
          mv ${WEBSERVER_HOME}/var/* ${tmpvar}/
      fi
      rm -rf ${WEBSERVER_HOME}/var
  fi
  ln -s ${LIB_DIRECTORY} ${WEBSERVER_HOME}/var
  print_verbose "created var symlink: ${WEBSERVER_HOME}/var"

  # jeedom backup compatibility:  ./core/css is a symlink
  # -> some important plugins like widget are writing direclty to core/css/...
  #    and there fore need www-data write permission
  if [ -L ${WEBSERVER_HOME}/core/css ]; then
      rm -f ${WEBSERVER_HOME}/core/css
  fi
  if [ -d ${WEBSERVER_HOME}/core/css ]; then
      mv ${WEBSERVER_HOME}/core/css/* ${LIB_DIRECTORY}/public/css/
      rm -rf ${WEBSERVER_HOME}/core/css
  fi
  ln -s ${LIB_DIRECTORY}/public/css/ ${WEBSERVER_HOME}/core/css
  print_verbose "created core/css symlink: ${WEBSERVER_HOME}/core/css"

  # jeedom javascript compatibility
  if [ ! -e ${WEBSERVER_HOME}/core/js ]; then
      ln -s ${WEBSERVER_HOME}/assets/js/core/ ${WEBSERVER_HOME}/core/js
  fi
  print_verbose "created core/js symlink: ${WEBSERVER_HOME}/assets/js/core"

  # jeedom template location compatibility
  if [ ! -e ${WEBSERVER_HOME}/core/template ]; then
      ln -s ${WEBSERVER_HOME}/views/templates/ ${WEBSERVER_HOME}/core/template
  fi
  print_verbose "created core/template symlink: ${WEBSERVER_HOME}/core/template"

  # jeedom backup compatibility:  ./data is a symlink
  if [ -L ${WEBSERVER_HOME}/data ]; then
      rm -f ${WEBSERVER_HOME}/data
  fi
  if [ -d ${WEBSERVER_HOME}/data ]; then
      content=$(ls -A ${WEBSERVER_HOME}/data)
      if [ ! -z "${content}" ]; then
          tmpvar=$(mktemp -d ${WEBSERVER_HOME}/data.XXXXXXXX)
          mv ${WEBSERVER_HOME}/data/* ${tmpvar}/
      fi
      rm -rf ${WEBSERVER_HOME}/data
  fi
  if [ -f ${WEBSERVER_HOME}/data ]; then
      rm -f ${WEBSERVER_HOME}/data
  fi
  if [ ! -e ${WEBSERVER_HOME}/data ]; then
      ln -s ${LIB_DIRECTORY}/data ${WEBSERVER_HOME}/data
  fi
  print_verbose "created data symlink: ${WEBSERVER_HOME}/data"
  #
  # jeedom logs compatibility
  if [ ! -f ${WEBSERVER_HOME}/log ]; then
    rm -f ${WEBSERVER_HOME}/log
  fi
  if [ ! -e ${WEBSERVER_HOME}/log ]; then
      ln -s ${LOG_DIRECTORY} ${WEBSERVER_HOME}/log
  fi
  #clear cache
  sh ${WEBSERVER_HOME}/scripts/clear_cache.sh
  print_verbose "cache cleared"
}

step_nextdom_configuration() {
  # recreate configuration from sample
  cp ${WEBSERVER_HOME}/core/config/common.config.sample.php ${WEBSERVER_HOME}/core/config/common.config.php
  SECRET_KEY=$(</dev/urandom tr -dc '1234567890azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN_@;=' | head -c30; echo "")
  # Add a special char
  SECRET_KEY=$SECRET_KEY$(</dev/urandom tr -dc '*&!@#' | head -c1; echo "")
  # Add numeric char
  SECRET_KEY=$SECRET_KEY$(</dev/urandom tr -dc '1234567890' | head -c1; echo "")
  sed -i "s/#PASSWORD#/${MYSQL_NEXTDOM_PASSWD}/g" ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s/#DBNAME#/${MYSQL_NEXTDOM_DB}/g"       ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s/#USERNAME#/${MYSQL_NEXTDOM_USER}/g"   ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s/#PORT#/${MYSQL_PORT}/g"               ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s/#HOST#/${MYSQL_HOSTNAME}/g"           ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s%#LOG_DIR#%${LOG_DIRECTORY}%g"         ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s%#LIB_DIR#%${LIB_DIRECTORY}%g"         ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s%#TMP_DIR#%${TMP_DIRECTORY}%g"         ${WEBSERVER_HOME}/core/config/common.config.php
  sed -i "s%#SECRET_KEY#%${SECRET_KEY}%g"         ${WEBSERVER_HOME}/core/config/common.config.php
  print_verbose "wrote configuration file: ${WEBSERVER_HOME}/core/config/common.config.php"

  # some other compatibilty ugly stuff
  if [[ -d "/tmp/jeedom" ]]; then
      if [[ -L "/tmp/jeedom" ]]; then
          rm -f /tmp/jeedom
          if [[ ! -d "${TMP_DIRECTORY}" ]]; then
              mkdir -p ${TMP_DIRECTORY} >> ${DEBUG} 2>&1
          fi
          ln -s ${TMP_DIRECTORY} /tmp/jeedom
      else
        if [[ -d "${TMP_DIRECTORY}" ]]; then
            mv /tmp/jeedom/* ${TMP_DIRECTORY}/
        else
          mv /tmp/jeedom ${TMP_DIRECTORY}
          ln -s ${TMP_DIRECTORY} /tmp/jeedom
        fi
      fi
  else
    if [[ ! -d "${TMP_DIRECTORY}" ]]; then
        mkdir -p ${TMP_DIRECTORY}
    fi
    rm -f /tmp/jeedom
    ln -s ${TMP_DIRECTORY} /tmp/jeedom
  fi
  print_verbose "created temporary directory: ${TMP_DIRECTORY}"

  # allow www-data to use usb/serial ports
  usermod -a -G dialout,tty www-data

  # set tmp directory as ramfs mount point if enough memory is available
  if [[ -f "/proc/meminfo" ]] ; then
      if [ $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }') -gt 600000 ]; then
          if [[ -f "/etc/fstab" ]] ; then
              if [ $(cat /etc/fstab | grep ${TMP_DIRECTORY} | grep tmpfs | wc -l) -eq 0 ];then
                  cat - >> /etc/fstab <<EOS
tmpfs ${TMP_DIRECTORY} tmpfs defaults,size=128M 0 0
EOS
              fi
          fi
      fi
  fi

  # add www-data in sudoers with no password
  if [ $(grep "www-data ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | wc -l ) -eq 0 ]; then
      echo "www-data ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo) >/dev/null
      if [ $? -ne 0 ]; then
          print_error "unable to add www-data to sudoers"
      fi
  fi
  print_verbose "added user as sudoer: www-data"
}


step_nextdom_mysql_configuration() {
  # check that mysql is locally installed before any further configuration
  # default value for mysql_host is localhost
  [[ "localhost" != "$HOSTNAME" ]] && {
    print_log_ok "Remote mysql server detected"
    return 0
  }

  service mysql status 2>&1 >>${DEBUG}
  isService=$?
  if [ ! -f /etc/init.d/mysql -o ${isService} -gt 0 ]; then
    print_log_ok "no mysql service locally"
    return 0
  fi

  service mysql stop >> ${DEBUG} 2>&1 || {
    service mysql stop >> ${DEBUG} 2>&1 || {
      print_error "unable to stop mysql"
    }
  }

  rm -f /var/lib/mysql/ib_logfile*

  if [ -d /etc/mysql/conf.d ]; then
      cat - > /etc/mysql/conf.d/nextdom_my.cnf <<EOS
[mysqld]
skip-name-resolve
key_buffer_size = 16M
thread_cache_size = 16
tmp_table_size = 48M
max_heap_table_size = 48M
query_cache_type =1
query_cache_size = 32M
query_cache_limit = 2M
query_cache_min_res_unit=3K
innodb_flush_method = O_DIRECT
innodb_flush_log_at_trx_commit = 2
innodb_log_file_size = 32M
EOS
  fi
  print_verbose "created nextdom mysql configuration: /etc/mysql/conf.d/nextdom_my.cnf"

  service mysql start >> ${DEBUG} 2>&1 || {
    service mysql start >> ${DEBUG} 2>&1 || {
      print_error "unable to restart mysql"
    }
  }
}

step_nextdom_crontab() {
  cat - > /etc/cron.d/nextdom << EOS
* * * * * www-data /usr/bin/php ${WEBSERVER_HOME}/src/Api/start_cron.php >> /dev/null
EOS
  print_verbose "created nextdom cron configuration: /etc/cron.d/nextdom"

  cat - > /etc/cron.d/nextdom_watchdog << EOS
*/5 * * * * root /usr/bin/php ${WEBSERVER_HOME}/scripts/watchdog.php >> /dev/null
EOS
  print_verbose "created nextdom cron configuration: /etc/cron.d/nextdom_watchdog"

  service cron reload >> ${DEBUG} 2>&1
}

step_nextdom_assets() {
  # Generate CSS files
  if [ 1 -eq "0${isdev}" ]; then
      # A faire dans une version developpeur (apres git clone)
      cd ${WEBSERVER_HOME}
      ./scripts/gen_global.sh >> ${DEBUG} 2>&1 || {
        print_error "error during asset generation"
      }
      print_verbose "installed nodejs"
      print_verbose "installed composer manager"
      print_verbose "installed project dependencies"
      print_verbose "copied icons, themes and images from assets"
      print_verbose "generated css files"
      print_verbose "generated javascript files"
  fi
}

step_nextdom_check() {
  php ${WEBSERVER_HOME}/scripts/sick.php >> ${DEBUG} 2>&1
}

step_os_specific(){
  if [ -f /etc/armbian.txt ]; then
      cat ${WEBSERVER_HOME}/install/OS_specific/armbian/post-install.sh | bash >> ${DEBUG} 2>&1
  fi

  if [ -f /usr/bin/raspi-config ]; then
      cat ${WEBSERVER_HOME}/install/OS_specific/rpi/post-install.sh | bash >> ${DEBUG} 2>&1
  fi
}


step_nextdom_var_www_html() {
  # Link ${WEBSERVER_HOME} to /var/www/html. Required by old plugins that may hardcode this path.
  # Any previously installed content are moved to temporairy directories in check_var_www_html()
  # (useless for docker since this directory is empty)

  dirn="/var/www/html"
  if [  "${WEBSERVER_HOME}" == "${dirn}" ] ; then
      return 0
  fi

  # moving any content of /var/www/html to /var/www/html.XXXXXXXX
  if [[ -d "${dirn}" ]] ; then
      count="$( find ${dirn} -mindepth 1 -maxdepth 1 | wc -l )"
      if [ $count -gt 0 ] ; then
          tmpd="$(mktemp -d -u /var/www/html.XXXXXXXX)"
          mv ${dirn} ${tmpd}
          print_verbose "warning : directory ${dirn} isn't empty, renamed to ${tmpd}"
      fi
  fi

  # rename any pre-exiting link
  if [[ -L "${dirn}" ]] ; then
      dest=$(readlink "${dirn}")
      if [ "${dest}" == "${WEBSERVER_HOME}" ]; then
          rm -f "${dirn}"
      else
          tfile="$(mktemp -u /var/www/html.XXXXXXXX)"
          cd /var/www/
          mv ${dirn} ${tfile}
          print_verbose "warning : directory ${dirn} is a link, renamed it ${tfile}"
      fi
  fi

  # strange but why not
  if [[ -f "${dirn}" ]] ; then
      tfile=$(mktemp -u /var/www/html.XXXXXXXX)
      mv ${dirn} ${tfile}
      print_verbose "warning : ${dirn} is a file, renamed it ${tfile}"
  fi

  # link /var/www/html to nextdom root
  ln -s "${WEBSERVER_HOME}" /var/www/html
}

step_restore_owner() {
   chown -R www-data:www-data ${WEBSERVER_HOME}
   if [ -d "/tmp/nextdom" ]; then
     chown -R www-data:www-data /tmp/nextdom
   fi
}

step_nextdom_mysql_populate() {
  CONSTRAINT="%";
  if [ ${MYSQL_HOSTNAME} == "localhost" ]; then
      CONSTRAINT='localhost';
  fi

  QUERY="DROP USER IF EXISTS '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}';"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  print_verbose "deleted mysql user: ${MYSQL_NEXTDOM_USER}"

  QUERY="CREATE USER '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}' IDENTIFIED BY '${MYSQL_NEXTDOM_PASSWD}';"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  print_verbose "created mysql user: ${MYSQL_NEXTDOM_USER}"

  QUERY="DROP DATABASE IF EXISTS ${MYSQL_NEXTDOM_DB};"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  print_verbose "deleted mysql table: ${MYSQL_NEXTDOM_DB}"

  QUERY="CREATE DATABASE ${MYSQL_NEXTDOM_DB};"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  print_verbose "created mysql table: ${MYSQL_NEXTDOM_DB}"

  QUERY="GRANT ALL PRIVILEGES ON ${MYSQL_NEXTDOM_DB}.* TO '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}';"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  QUERY="FLUSH PRIVILEGES;"
  mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}" >> ${DEBUG} 2>&1
  print_verbose "configured table privileges: ${MYSQL_NEXTDOM_DB}"

  php ${WEBSERVER_HOME}/install/install.php mode=force >> ${DEBUG} 2>&1 || {
    print_error "NextDom installation script failed"
  }
  print_verbose "ran installation procedure: ${WEBSERVER_HOME}/install/install.php"
}


# ======================================================================
# Main

main() {
  LIB_DIRECTORY=/var/lib/nextdom
  LOG_DIRECTORY=/var/log/nextdom
  TMP_DIRECTORY=/tmp/nextdom
  VERBOSE=0

  while getopts "vhi:p:d:r:u:z:L:l:t:D" option; do
    case "${option}" in
      h)
        usage
        ;;
      D)
        ENV_TYPE="dev"
      ;;
      v)
        VERBOSE=1
        ;;
      i)
        MYSQL_HOSTNAME=${OPTARG}
        ;;
      z)
        MYSQL_PORT=${OPTARG}
        ;;
      d)
        MYSQL_NEXTDOM_DB=${OPTARG}
        ;;
      u)
        MYSQL_NEXTDOM_USER=${OPTARG}
        ;;
      p)
        MYSQL_NEXTDOM_PASSWD=${OPTARG}
        ;;
      r)
        MYSQL_ROOT_PASSWD=${OPTARG}
        ;;
      L)
        LOG_DIRECTORY=${OPTARG}
        ;;
      l)
        LIB_DIRECTORY=${OPTARG}
        ;;
      t)
        TMP_DIRECTORY=${OPTARG}
        ;;
      *)
        usage
        ;;
    esac
  done
  shift $((OPTIND-1))

  if [ $(id -u) != 0 ] ; then
      echo "Les droits de super-utilisateur (root) sont requis pour installer NextDom"
      echo "Veuillez lancer sudo $0 ou connectez-vous en tant que root, puis relancez $0"
      exit 1
  fi

  # Start all services
  service apache2 start
  service cron start
  service mysql start

  set_root $0
  detect_dev_version
  prereq_create_dirs

  print_log_in "step_nextdom_directory_layout ... "
  step_nextdom_directory_layout
  print_log_ok

  print_log_in "step_nextdom_assets ... "
  step_nextdom_assets
  print_log_ok

  print_log_in "step_nextdom_mysql_parameters ... "
  step_nextdom_mysql_parameters
  print_log_ok

  print_log_in "step_nextdom_var_www_html ... "
  step_nextdom_var_www_html
  print_log_ok

  print_log_in "step_nextdom_prerequisites_verification ... "
  step_nextdom_prerequisites_verification
  print_log_ok

  print_log_in "step_nextdom_apache_php ... "
  step_nextdom_apache_php
  print_log_ok

  print_log_in "step_nextdom_configuration ... "
  step_nextdom_configuration
  print_log_ok

  print_log_in "step_nextdom_mysql_configuration ... "
  step_nextdom_mysql_configuration
  print_log_ok

  print_log_in "step_nextdom_mysql_populate ... "
  step_nextdom_mysql_populate
  print_log_ok

  print_log_in "step_nextdom_crontab ... "
  step_nextdom_crontab
  print_log_ok

  print_log_in "step_nextdom_check ... "
  step_nextdom_check
  print_log_ok

  print_log_in "step_os_specific ... "
  step_os_specific
  print_log_ok

  print_log_in "step_nextdom_permissions ..."
  step_nextdom_file_permissions
  print_log_ok

  print_log_in "step_restore_owner ..."
  step_restore_owner
  print_log_ok

  print_log_in "step_nextdom_copy_config.ini ... "
  step_nexdom_environement
  print_log_ok

  [[ -f /root/.mysqlroot ]] && rm -f /root/.mysqlroot

  if [ -f .git  ] ; then
      cat - <<EOS
  Installation dir  : ${WEBSERVER_HOME}

  Database host     : ${MYSQL_HOSTNAME}
  Database port     : ${MYSQL_PORT}
  Database name     : ${MYSQL_NEXTDOM_DB}
  Database user     : ${MYSQL_NEXTDOM_USER}
  Database password : ${MYSQL_NEXTDOM_PASSWD}

  > A self-signed SSL Certificate created in /etc/nextdom/ssl/
  > Please feel free to use another Certificate

  >>>>> COMPLETED <<<<<
EOS
  fi
}

main $@
