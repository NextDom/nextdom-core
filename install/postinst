#!/usr/bin/env bash

# Parameters
DEBUG="/tmp/output.txt"
VERT="\\033[1;32m"
NORMAL="\\033[0;39m"
ROUGE="\\033[1;31m"
ROSE="\\033[1;35m"
BLEU="\\033[1;34m"
BLANC="\\033[0;02m"
BLANCLAIR="\\033[1;08m"
JAUNE="\\033[1;33m"
CYAN="\\033[1;36m"

# Logs directory
LOGS_DIRECTORY=/var/log/nextdom
mkdir -p ${LOGS_DIRECTORY}
touch ${LOGS_DIRECTORY}/cron
touch ${LOGS_DIRECTORY}/cron_execution
touch ${LOGS_DIRECTORY}/event
touch ${LOGS_DIRECTORY}/http.error
touch ${LOGS_DIRECTORY}/plugin
touch ${LOGS_DIRECTORY}/scenario_execution
mkdir -p ${LOGS_DIRECTORY}/scenarioLog
chown www-data:www-data -R $LOGS_DIRECTORY

# configs directory
VARS_DIRECTORY=/var/lib/nextdom
mkdir -p ${VARS_DIRECTORY}
chmod 775 -R ${VARS_DIRECTORY}
chown -R www-data:www-data ${VARS_DIRECTORY}

# Functions

usage() { echo "Usage: $0 [-h <help>] [-i <DB ip/hostname>] [-z <DB port>] [-d <DB name>] [-u <DB username>] [-p <DB user password>] " 1>&2; exit 1; }


# Get current directory
set_root() {
    local this=`readlink -n -f $1`
    local bin=`dirname $this`
    root=`dirname $bin`
}


print_log_in() {
    txt=$1
    if [ 1 -eq "0${isdev}"  ] ; then
        printf "${txt}"
    fi
    printf ${txt} >> $LOG_DIRECTORY/postinst.log
}


print_log_ok() {
    if [ 1 -eq "0${isdev}"  ] ; then
        echo " OK"
    fi
    echo " OK" >> $LOG_DIRECTORY/postinst.log
}


detect_dev_version(){

    # Detect if there is a .git directory (development version)
    if [ -d ${root}/.git ] ; then
        echo "Development version..."
        isdev=1
        WEBSERVER_HOME=${root}
    else
        # Debian package configuration...
        isdev=0
        WEBSERVER_HOME=/usr/share/nextdom
    fi

}


step_nextdom_mysql_parameters() {

    if [ 1 -eq "0${isdev}"  ] ; then
        # Development version
        [[ -z "${MYSQL_NEXTDOM_DB}" ]] && MYSQL_NEXTDOM_DB="nextdomdev"
        [[ -z "${MYSQL_NEXTDOM_USER}" ]] && MYSQL_NEXTDOM_USER="nextdomdev"
    else
        # Debian package configuration...

        # nextdom-mysql preconfiguration
        if [[ -f /etc/nextdom/mysql/secret ]] ; then
            source /etc/nextdom/mysql/secret
        fi
        [[ -z "${MYSQL_NEXTDOM_DB}" ]] && MYSQL_NEXTDOM_DB="nextdom"
        [[ -z "${MYSQL_NEXTDOM_USER}" ]] && MYSQL_NEXTDOM_USER="nextdom"
    fi
    # All parameters
    MYSQL_ROOT_PASSWD=${MYSQL_ROOT_PASSWD:-$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 15)}
    MYSQL_NEXTDOM_PASSWD=${MYSQL_NEXTDOM_PASSWD:-$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 15)}
    MYSQL_HOSTNAME=${MYSQL_HOSTNAME:-localhost}
    MYSQL_PORT=${MYSQL_PORT:-3306}
    MYSQL_NEXTDOM_DB=${MYSQL_NEXTDOM_DB:nextdom}
    HOSTPASS=""
    if [[ "${MYSQL_HOSTNAME}" != "localhost" ]] ; then
        HOSTPASS="-p${MYSQL_ROOT_PASSWD} -h${MYSQL_HOSTNAME}"
    fi
    #
    if [ 1 -eq "0${isdev}"  ] ; then
        echo " "
        echo "Installation dir  : ${WEBSERVER_HOME}"
        echo "Database host     : ${MYSQL_HOSTNAME}"
        echo "Database port     : ${MYSQL_PORT}"
        echo "Database name     : ${MYSQL_NEXTDOM_DB}"
        echo "Database user     : ${MYSQL_NEXTDOM_USER}"
        echo "Database password : ${MYSQL_NEXTDOM_PASSWD}"
    fi
    # Test connexion
    iret=1
    n=0;
    # slow start of docker mysql
    while [ $n -le 5 ] && [ $iret -eq 1 ]
    do
        #echo ">>>>> checking database access <<<<<"
        mysql -uroot ${HOSTPASS} --port=${MYSQL_PORT} -e "SHOW DATABASES;" >/dev/null 2>&1
        iret=$?
        if [[ $iret -eq 0 ]] ; then break ; fi
        n=$(( $n + 1 ))
        sleep 5
    done
    if [[ ${iret} -ne 0 ]] ; then
        echo ">>>> Error : can\'t connect to database <<<<"
        exit 1
    fi
}


step_nextdom_prerequisites_verification() {

    # These prerequistes are instaled by nextdom-common or nextdom-minimal package, but this part is for other distribution compatibility

    # Apache configuration files
    if [[ ! -d "/etc/apache2/sites-available" ]] ; then
        echo ">>>> Error : Apache2 isn't installed ! <<<<"
        exit 1
    fi
    #
    if [[ ! -f "/etc/apache2/sites-available/nextdom.conf" ]] ; then
        cp ${WEBSERVER_HOME}/install/apache/nextdom.conf /etc/apache2/sites-available/nextdom.conf >> ${DEBUG} 2>&1
        echo "<I> Creating file : /etc/apache2/sites-available/nextdom.conf"
    fi
    #
    if [[ ! -f "/etc/apache2/sites-available/nextdom-ssl.conf" ]] ; then
        cp ${WEBSERVER_HOME}/install/apache/nextdom-ssl.conf /etc/apache2/sites-available/nextdom-ssl.conf >> ${DEBUG} 2>&1
        echo "<I> Creating file : /etc/apache2/sites-available/nextdom-ssl.conf"
    fi
    #
    if [[ ! -f "/etc/apache2/conf-available/nextdom-security.conf" ]] ; then
        cp ${WEBSERVER_HOME}/install/apache/nextdom-security.conf /etc/apache2/conf-available/nextdom-security.conf >> ${DEBUG} 2>&1
        echo "<I> Creating file : /etc/apache2/conf-available/nextdom-security.conf"
    fi
    #
    if [[ ! -f "/etc/systemd/system/apache2.service.d/privatetmp.conf" ]] ; then
        mkdir -p /etc/systemd/system/apache2.service.d
        cp ${WEBSERVER_HOME}/install/apache/privatetmp.conf /etc/systemd/system/apache2.service.d/privatetmp.conf >> ${DEBUG} 2>&1
        echo "<I> Creating file : /etc/systemd/system/apache2.service.d/privatetmp.conf"
    fi

    # Dvp version hack (remove in next stable)
    if [ 1 -eq "0${isdev}"  ] ; then
        cp ${WEBSERVER_HOME}/install/apache/nextdom.conf /etc/apache2/sites-available/nextdom.conf >> ${DEBUG} 2>&1
        cp ${WEBSERVER_HOME}/install/apache/nextdom-ssl.conf /etc/apache2/sites-available/nextdom-ssl.conf >> ${DEBUG} 2>&1
        cp ${WEBSERVER_HOME}/install/apache/nextdom-security.conf /etc/apache2/conf-available/nextdom-security.conf >> ${DEBUG} 2>&1
    fi

    # Windows hack (bash for windows)
    if [[ ! $(uname -r | grep -i microsoft) = "" ]] ; then
        bash ${WEBSERVER_HOME}/install/OS_specific/windows/pre_inst.sh >> ${DEBUG} 2>&1
    fi

    # PHP
    ll=$(find /etc/ -iname php.ini -type f |wc -l) >> ${DEBUG} 2>&1
    if [[ "$ll" = "0" ]] ; then
        echo ">>>> Error : PHP not found ! <<<<"
        exit 1
    fi
    #
    # Certificat SSL auto signe
    if [[ ! -f /etc/nextdom/ssl/nextdom.crt ]] || [[ ! -f /etc/nextdom/ssl/nextdom.csr ]] || [[ ! -f /etc/nextdom/ssl/nextdom.key ]] ; then
        echo "<I> Creating SSL self-signed certificat in /etc/nextdom/ssl/"
        mkdir -p /etc/nextdom/ssl/ >> ${DEBUG} 2>&1
        cd /etc/nextdom/ssl/ >> ${DEBUG} 2>&1
        openssl genrsa -out nextdom.key 2048 >> ${DEBUG} 2>&1
        openssl req -new -key nextdom.key -out nextdom.csr -subj "/C=FR/ST=Paris/L=Paris/O=Global Security/OU=IT Department/CN=example.com" >> ${DEBUG} 2>&1
        openssl x509 -req -days 3650 -in nextdom.csr -signkey nextdom.key -out nextdom.crt >> ${DEBUG} 2>&1
    fi

}


step_nextdom_apache_php() {

    # Apache2
    a2enmod ssl >> ${DEBUG} 2>&1
    a2dissite 000-default >> ${DEBUG} 2>&1
    a2dissite default-ssl >> ${DEBUG} 2>&1
    a2ensite nextdom-ssl >> ${DEBUG} 2>&1
    a2ensite nextdom >> ${DEBUG} 2>&1
    a2enconf nextdom-security >> ${DEBUG} 2>&1

    for file in $(find /etc/ -iname php.ini -type f); do
        echo "Update php file ${file}" >> ${DEBUG} 2>&1
        sed -i 's/max_execution_time = 30/max_execution_time = 600/g' ${file} > /dev/null 2>&1
        sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 1G/g' ${file} > /dev/null 2>&1
        sed -i 's/post_max_size = 8M/post_max_size = 1G/g' ${file} > /dev/null 2>&1
        sed -i 's/expose_php = On/expose_php = Off/g' ${file} > /dev/null 2>&1
        sed -i 's/;opcache.enable=0/opcache.enable=1/g' ${file} > /dev/null 2>&1
        sed -i 's/opcache.enable=0/opcache.enable=1/g' ${file} > /dev/null 2>&1
        sed -i 's/;opcache.enable_cli=0/opcache.enable_cli=1/g' ${file} > /dev/null 2>&1
        sed -i 's/opcache.enable_cli=0/opcache.enable_cli=1/g' ${file} > /dev/null 2>&1
    done

    a2dismod status >> ${DEBUG} 2>&1
    a2enmod rewrite >> ${DEBUG} 2>&1
    #systemctl daemon-reload >> ${DEBUG} 2>&1
    set +e
    service apache2 restart >> ${DEBUG} 2>&1
    if [ $? -ne 0 ]; then
        service apache2 restart >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut redÃ©marrer apache - Annulation${NORMAL}"
            exit 1
        fi
    fi
    set -e
}


step_nextdom_configuration() {
    rm -Rf ${WEBSERVER_HOME}/core/config
    cp -r ${WEBSERVER_HOME}/assets/config ${VARS_DIRECTORY}
    cp -r ${WEBSERVER_HOME}/assets/data ${VARS_DIRECTORY}
    ln -s ${VARS_DIRECTORY}/config ${WEBSERVER_HOME}/core
    ln -s ${VARS_DIRECTORY}/data ${WEBSERVER_HOME}/data
    cp ${WEBSERVER_HOME}/core/config/common.config.sample.php ${WEBSERVER_HOME}/core/config/common.config.php

    sed -i "s/#PASSWORD#/${MYSQL_NEXTDOM_PASSWD}/g" ${WEBSERVER_HOME}/core/config/common.config.php
    sed -i "s/#DBNAME#/${MYSQL_NEXTDOM_DB}/g" ${WEBSERVER_HOME}/core/config/common.config.php
    sed -i "s/#USERNAME#/${MYSQL_NEXTDOM_USER}/g" ${WEBSERVER_HOME}/core/config/common.config.php
    sed -i "s/#PORT#/${MYSQL_PORT}/g" ${WEBSERVER_HOME}/core/config/common.config.php
    sed -i "s/#HOST#/${MYSQL_HOSTNAME}/g" ${WEBSERVER_HOME}/core/config/common.config.php

    #chmod 775 -R ${WEBSERVER_HOME}
    #chown -R www-data:www-data ${WEBSERVER_HOME}
    if [[ -d "/tmp/jeedom" ]]
    then
        if [[ -L "/tmp/jeedom" ]]
        then
            rm -f /tmp/jeedom
            ln -s /tmp/nextdom /tmp/jeedom
            if [[ ! -d "/tmp/nextdom" ]]
            then
                mkdir -p /tmp/nextdom >> ${DEBUG} 2>&1
            fi
        else
            if [[ -d "/tmp/nextdom" ]]
            then
                mv /tmp/jeedom/* /tmp/nextdom/
            else
                mv /tmp/jeedom /tmp/nextdom
                ln -s /tmp/nextdom /tmp/jeedom
            fi
        fi
    else
        if [[ ! -d "/tmp/nextdom" ]]
        then
            mkdir -p /tmp/nextdom
        fi
        ln -s /tmp/nextdom /tmp/jeedom
    fi
    chmod 777 -R /tmp/nextdom >> ${DEBUG} 2>&1
    chmod 777 /tmp/jeedom >> ${DEBUG} 2>&1
    chown www-data:www-data -R /tmp/nextdom >> ${DEBUG} 2>&1
    chown www-data:www-data /tmp/jeedom >> ${DEBUG} 2>&1
    chown www-data:www-data -R $LOGS_DIRECTORY

    usermod -a -G dialout,tty www-data

    if [[ -f "/proc/meminfo" ]] ; then
        if [ $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }') -gt 600000 ]; then
            if [[ -f "/etc/fstab" ]] ; then
                if [ $(cat /etc/fstab | grep /tmp/nextdom | grep tmpfs | wc -l) -eq 0 ];then
                    echo 'tmpfs        /tmp/nextdom            tmpfs  defaults,size=128M                                       0 0' >>  /etc/fstab
                fi
            fi
        fi
    fi
    if [ $(grep "www-data ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | wc -l ) -eq 0 ];then
        echo "www-data ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo) >/dev/null
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut permettre a nextdom d\'utiliser sudo - Annulation${NORMAL}"
            exit 1
        fi
    fi
}


step_nextdom_mysql_configuration() {
    # MySQL
    set +e
    #isMySQL=$(ls /etc/init.d | grep mysql)
    mysqladmin -u root status >/dev/null 2>/dev/null
    isMySQL=$?
    set +e
    if [[ ${isMySQL} -eq 0 ]] ; then
        service mysql stop >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            service mysql stop >> ${DEBUG} 2>&1
            if [ $? -ne 0 ]; then
                printf "${ROUGE}Ne peut arrÃªter mysql - Annulation${NORMAL}"
                exit 1
            fi
        fi
        set -e
        rm -f /var/lib/mysql/ib_logfile*

        if [ -d /etc/mysql/conf.d ]; then
            touch /etc/mysql/conf.d/nextdom_my.cnf
            echo "[mysqld]" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "skip-name-resolve" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "key_buffer_size = 16M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "thread_cache_size = 16" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "tmp_table_size = 48M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "max_heap_table_size = 48M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_type =1" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_size = 32M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_limit = 2M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_min_res_unit=3K" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_flush_method = O_DIRECT" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_flush_log_at_trx_commit = 2" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_log_file_size = 32M" >> /etc/mysql/conf.d/nextdom_my.cnf
        fi

        service mysql start >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            service mysql start >> ${DEBUG} 2>&1
            if [ $? -ne 0 ]; then
                printf "${ROUGE}Ne peut lancer mysql - Annulation${NORMAL}"
                exit 1
            fi
        fi

    fi
}



step_nextdom_crontab() {
    rm -f /etc/cron.d/nextdom /etc/cron.d/nextdom_watchdog >> ${DEBUG} 2>&1
    if [ $(crontab -l 2>/dev/null | grep nextdom | wc -l) -ne 0 ];then
        (echo crontab -l | grep -v "nextdom") | crontab -  >> ${DEBUG} 2>&1
    fi
    if [ ! -f /etc/cron.d/nextdom ]; then
        echo "* * * * * www-data /usr/bin/php ${WEBSERVER_HOME}/src/Api/start_cron.php >> /dev/null" > /etc/cron.d/nextdom
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut installer le cron de nextdom - Annulation${NORMAL}"
            exit 1
        fi
    fi
    if [ ! -f /etc/cron.d/nextdom_watchdog ]; then
        echo "*/5 * * * * root /usr/bin/php ${WEBSERVER_HOME}/scripts/watchdog.php >> /dev/null" > /etc/cron.d/nextdom_watchdog
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut installer le cron de nextdom - Annulation${NORMAL}"
            exit 1
        fi
    fi
    service cron start
}

step_nextdom_check() {
    php ${WEBSERVER_HOME}/scripts/sick.php >> ${DEBUG} 2>&1
}

distrib_1_spe(){
    cd /tmp
    if [ -f post-install.sh ]; then
        rm post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f /etc/armbian.txt ]; then
        cp ${WEBSERVER_HOME}/install/OS_specific/armbian/post-install.sh post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f /usr/bin/raspi-config ]; then
        cp ${WEBSERVER_HOME}/install/OS_specific/rpi/post-install.sh post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f post-install.sh ]; then
        chmod +x post-install.sh >> ${DEBUG} 2>&1
        ./post-install.sh >> ${DEBUG} 2>&1
        rm post-install.sh >> ${DEBUG} 2>&1
    fi
}

check_var_www_html() {
    dirn="/var/www/html"
    # Verification que le repertoire /var/www/html est bien vide
    if [[ -d ${dirn} ]] ; then
      count="$( find ${dirn} -mindepth 1 -maxdepth 1 | wc -l )"
      if [ $count -gt 0 ] ; then
        tmpd="$(mktemp -d -u /var/www/html.XXXXXXXX)"
        mv ${dirn} ${tmpd}
        echo " "
        echo ">>>>> Nextdom Warning : directory ${dirn} isn't empty.. Renaming it ${tmpd} ... <<<<<"
        echo " "
      fi
    fi
    if [[ -L ${dirn} ]] ; then
        tfile=$(mktemp -u /var/www/html.XXXXXXXX)
        cd /var/www/
        mv ${dirn} ${tfile}
        echo -e "\n>>>>> Nextdom Warning : directory ${dirn} is a link. Renaming it ${tfile} ... <<<<<\n"
    fi
    if [[ -f ${dirn} ]] ; then
        # strange but why not
        tfile=$(mktemp -u /var/www/html.XXXXXXXX)
        mv ${dirn} ${tfile}
        echo " "
        echo ">>>>> Nextdom Warning : ${dirn} is a file (!). Renaming it ${tfile} ... <<<<<"
        echo " "
    fi
}

step_nextdom_var_www_html() {
    # Keep compatibility (old plugins)
    # useless for docker
    if [ -t 0 ] ; then    # launch only when interactive (this is already done by preinst Debian script)
        if [ "${WEBSERVER_HOME}" != "/var/www/html" ] ; then
           check_var_www_html
        fi
    fi
    if [  "${WEBSERVER_HOME}" != "/var/www/html" ] ; then
        ln -s ${WEBSERVER_HOME} /var/www/html
    fi

    # Generate CSS files
    if [ 1 -eq "0${isdev}"  ] ; then
        # A faire dans une version developpeur (apres git clone)
        cd ${WEBSERVER_HOME}
        ./scripts/gen_global.sh
    fi
}

step_nextdom_mysql_populate() {
        CONSTRAINT="%";
        if [ ${MYSQL_HOSTNAME} == "localhost" ];
            then CONSTRAINT='localhost';
        fi
        QUERY="DROP USER IF EXISTS '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}';"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        QUERY="CREATE USER '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}' IDENTIFIED BY '${MYSQL_NEXTDOM_PASSWD}';"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        QUERY="DROP DATABASE IF EXISTS ${MYSQL_NEXTDOM_DB};"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        QUERY="CREATE DATABASE ${MYSQL_NEXTDOM_DB};"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        QUERY="GRANT ALL PRIVILEGES ON ${MYSQL_NEXTDOM_DB}.* TO '${MYSQL_NEXTDOM_USER}'@'${CONSTRAINT}';"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        QUERY="FLUSH PRIVILEGES;"
        mysql -uroot -h${MYSQL_HOSTNAME} ${HOSTPASS} -e "${QUERY}"
        php ${WEBSERVER_HOME}/install/install.php mode=force >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            echo "${ROUGE}Ne peut installer nextdom - Annulation${NORMAL}"
            exit 1
        fi
}


# ======================================================================
# Main
if [ $(id -u) != 0 ] ; then
    echo "Les droits de super-utilisateur (root) sont requis pour installer NextDom"
    echo "Veuillez lancer sudo $0 ou connectez-vous en tant que root, puis relancez $0"
    exit 1
fi

while getopts "i:p:d:r:u:z:" option; do
    case "${option}" in
        h)
            usage
            ;;
        i)
            MYSQL_HOSTNAME=${OPTARG}
            ;;
        z)
            MYSQL_PORT=${OPTARG}
            ;;
        d)
            MYSQL_NEXTDOM_DB=${OPTARG}
            ;;
        u)
            MYSQL_NEXTDOM_USER=${OPTARG}
            ;;
        p)
            MYSQL_NEXTDOM_PASSWD=${OPTARG}
            ;;
        r)  MYSQL_ROOT_PASSWD=${OPTARG}
            ;;
        *)
            usage
            exit -1
            ;;
    esac
done
shift $((OPTIND-1))

set_root $0

# Installation logs
[[ -f $LOG_DIRECTORY/postinst.ok ]] && rm -f $LOG_DIRECTORY/postinst.ok
[[ -f $LOG_DIRECTORY/postinst.warn ]] && rm -f $LOG_DIRECTORY/postinst.warn
[[ -f $LOG_DIRECTORY/postinst.log ]] && rm -f $LOG_DIRECTORY/postinst.log
touch $LOG_DIRECTORY/postinst.log


print_log_in "detect_dev_version ... "
detect_dev_version
print_log_ok

print_log_in "step_nextdom_mysql_parameters ... "
step_nextdom_mysql_parameters
print_log_ok

print_log_in "step_nextdom_var_www_html ... "
step_nextdom_var_www_html
print_log_ok

print_log_in "step_nextdom_prerequisites_verification ... "
step_nextdom_prerequisites_verification
print_log_ok

print_log_in "step_nextdom_apache_php ... "
step_nextdom_apache_php
print_log_ok

print_log_in "step_nextdom_configuration ... "
step_nextdom_configuration
print_log_ok

print_log_in "step_nextdom_mysql_configuration ... "
step_nextdom_mysql_configuration
print_log_ok

print_log_in "step_nextdom_mysql_populate ... "
step_nextdom_mysql_populate
print_log_ok

print_log_in "step_nextdom_crontab ... "
step_nextdom_crontab
print_log_ok

print_log_in "step_nextdom_check ... "
step_nextdom_check
print_log_ok

print_log_in "distrib_1_spe ... "
distrib_1_spe
print_log_ok

chmod 777 -R /tmp/nextdom
chown -R www-data:www-data /tmp/nextdom
mkdir -p ${WEBSERVER_HOME}/var/custom
chown -R www-data:www-data ${WEBSERVER_HOME}/var
chown -R www-data:www-data ${VARS_DIRECTORY}

[[ -f /root/.mysqlroot ]] && rm -f /root/.mysqlroot

if [ -f .git  ] ; then
    echo -e "\nInstallation dir  : ${WEBSERVER_HOME}"
    echo "Database host     : ${MYSQL_HOSTNAME}"
    echo "Database port     : ${MYSQL_PORT}"
    echo "Database name     : ${MYSQL_NEXTDOM_DB}"
    echo "Database user     : ${MYSQL_NEXTDOM_USER}"
    echo -e "Database password : ${MYSQL_NEXTDOM_PASSWD}\n"
    echo "\> A self-signed SSL Certificate created in /etc/nextdom/ssl/"
    echo -e "\> Please feel free to use another Certificate\n"
    echo " >>>>> COMPLETED <<<<< "
fi
